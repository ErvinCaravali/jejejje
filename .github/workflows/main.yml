name: Docker Compose Persistence Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-persistence:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.7
        options: --privileged
        ports:
          - 8000:8000
          - 5433:5432
          - 90:80
        env:
          DATABASE_HOST: db
          DATABASE_NAME: projecto
          DATABASE_USER: postgres
          DATABASE_PASSWORD: Ec94
          PGADMIN_DEFAULT_EMAIL: ervin.caravali@correounivalle.edu.co
          PGADMIN_DEFAULT_PASSWORD: Ec94

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Docker network if not exists
        run: docker network inspect mi-red >/dev/null || docker network create mi-red

      - name: Start Docker services
        run: |
          docker-compose up -d
          docker-compose ps

      - name: Wait for services to start
        run: sleep 30  # Espera 30 segundos para asegurarse de que los servicios estén completamente iniciados

      - name: Verify container network
        run: |
          CONTAINER_ID=$(docker-compose ps -q db)
          NETWORK=$(docker inspect -f '{{ range .NetworkSettings.Networks }}{{ .NetworkID }}{{ end }}' $CONTAINER_ID)
          if [ "$NETWORK" == "mi-red" ]; then
              echo "Los contenedores están en la misma red."
          else
              echo "Los contenedores no están en la misma red. Corrigiendo..."
              docker network connect mi-red $CONTAINER_ID
          fi
      
      - name: Check if database is accessible
        run: |
          if PGPASSWORD=Ec94 psql -h db -p 5432 -U postgres -d projecto -c "SELECT 1" > /dev/null; then
              echo "La base de datos está accesible"
          else
              echo "Error: La base de datos no está accesible"
              exit 1
          fi
      
      
      - name: Check if tables are populated
        run: |
          tables=("auctions" "artworks" "customers" "bids" "admins")
          for table in "${tables[@]}"; do
              if psql -h $DATABASE_HOST -U $DATABASE_USER -d $DATABASE_NAME -c "SELECT COUNT(*) FROM $table" | grep -q "[1-9][0-9]*"; then
                  echo "La tabla $table está poblada"
              else
                  echo "Advertencia: La tabla $table está vacía"
              fi
          done

      - name: Stop Docker services
        run: docker-compose down

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker-compose build
          docker-compose push
