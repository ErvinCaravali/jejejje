name: Push Images to Docker Hub

on:
  pull_request:
    branches:
      - main

jobs:
  build_and_run_container:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Start Docker
        run: sudo systemctl start docker

      # Build and run container
      - name: Build and run container
        id: build_and_run
        run: docker-compose -f docker-compose.yml -p my_project_name up -d  # Asigna el nombre "my_project_name" al proyecto

      # Ejecutar las migraciones de Django
      - name: Run Django migrations
        if: ${{ steps.build_and_run.outcome == 'success' }}
        id: django_migrations
        run: docker-compose exec -T web python manage.py migrate

      # Crear superusuario
      - name: Create superuser
        if: ${{ steps.django_migrations.outcome == 'success' }}
        id: create_superuser
        env:
          DJANGO_SUPERUSER_USERNAME: admin
          DJANGO_SUPERUSER_EMAIL: admin@example.com
          DJANGO_SUPERUSER_PASSWORD: password123
        run: docker-compose exec -T web python manage.py createsuperuser --username $DJANGO_SUPERUSER_USERNAME --email $DJANGO_SUPERUSER_EMAIL --noinput

      # Verificar la población de la base de datos
      - name: Verify Database Population
        if: ${{ steps.create_superuser.outcome == 'success' }}
        id: verify_db_pop
        run: |
          DB_CONTAINER_NAME="my_project_name_db"  # Usa el mismo nombre del proyecto y agrega "_db"
          CONTAINER_RUNNING=$(docker inspect -f '{{.State.Running}}' "$DB_CONTAINER_NAME" 2>/dev/null)
          
          if [ "$CONTAINER_RUNNING" == "true" ]; then
            POPULATED=$(docker exec -i "$DB_CONTAINER_NAME" sh -c 'psql -U ${DATABASE_USER} -d ${DATABASE_NAME} -c "SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = '\''public'\'' AND table_name != '\''schema_migrations'\'');" | grep -q "t" && echo 1 || echo 0)
            if [ "$POPULATED" == "1" ]; then
              echo "All tables are populated. Continue with the workflow."
              echo "::set-output name=populated::1"
            else
              echo "One or more tables are not populated. Halting the workflow."
              echo "::set-output name=populated::0"
              exit 1
            fi
          else
            echo "Database container is not running. Halting the workflow."
            echo "::set-output name=populated::0"
            exit 1
          fi

  push:
    runs-on: ubuntu-latest
    needs: build_and_run_container  # Esperar a que la construcción y la verificación se completen antes de comenzar

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # Etiquetar y subir la imagen del servicio web
      - name: Tag and push web service image
        run: |
          docker tag ervincaravaliibarra/galeria-8:latest ${{ secrets.DOCKER_USERNAME }}/galeria-8-web:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/galeria-8-web:latest

      # Etiquetar y subir la imagen del servicio de base de datos
      - name: Tag and push database service image
        run: |
          docker tag ervincaravaliibarra/bdgaleria-8:latest ${{ secrets.DOCKER_USERNAME }}/galeria-8-db:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/galeria-8-db:latest

      # Etiquetar y subir la imagen del servicio de pgAdmin
      - name: Tag and push pgAdmin service image
        run: |
          docker tag ervincaravaliibarra/pgadmin-galeria-8:latest ${{ secrets.DOCKER_USERNAME }}/galeria-8-pgadmin:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/galeria-8-pgadmin:latest
